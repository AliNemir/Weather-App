{"ast":null,"code":"var _jsxFileName = \"/home/ali/Work/weather-app/src/App.js\",\n    _s = $RefreshSig$();\n\nimport \"./App.css\";\nimport React, { useState, useEffect } from \"react\";\nimport Header from \"./componants/Header\";\nimport Weather from \"./componants/Weather\";\nimport Forecast from \"./componants/Forecast\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst URL = \"https://api.openweathermap.org/data/2.5/onecall\";\nconst API_KEY = \"c7c7e26782a97906905097118d594178\";\n\nfunction App() {\n  _s();\n\n  const [lat, setLat] = useState([]);\n  const [long, setLong] = useState([]);\n  const [city, setCity] = useState(\"\");\n  const [temprature, setTemprature] = useState([]);\n  const [humidity, setHumidity] = useState([]);\n  const [sunrise, setSunrise] = useState([]);\n  const [sunset, setSunset] = useState([]);\n  const [icon, setIcon] = useState([]);\n  const [forcast, setForcast] = useState([]);\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(function (position) {\n      setLat(position.coords.latitude);\n      setLong(position.coords.longitude);\n    });\n    axios.get(`${URL}?lat=${lat}&lon=${long}&exclude=hourly,minutely&appid=${API_KEY}`).then(weatherData => {\n      console.log(weatherData.data);\n      setTemprature(weatherData.data.current.temp);\n      setSunrise(weatherData.data.current.sunrise);\n      setSunset(weatherData.data.current.sunset);\n      setHumidity(weatherData.data.current.humidity);\n      setCity(weatherData.data.timezone);\n      setIcon(weatherData.data.current.weather[0].main);\n      setForcast(weatherData.data.daily);\n    });\n  }, [lat, long]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main\",\n    children: [/*#__PURE__*/_jsxDEV(\"head\", {\n      children: /*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Weather, {\n      temprature: temprature,\n      humidity: humidity,\n      sunrise: sunrise,\n      sunset: sunset,\n      city: city,\n      icon: icon\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Forecast, {\n      forcast: forcast\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"gXrwpXFe3RcGYcUAk5joo2E75c0=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/ali/Work/weather-app/src/App.js"],"names":["React","useState","useEffect","Header","Weather","Forecast","axios","URL","API_KEY","App","lat","setLat","long","setLong","city","setCity","temprature","setTemprature","humidity","setHumidity","sunrise","setSunrise","sunset","setSunset","icon","setIcon","forcast","setForcast","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","get","then","weatherData","console","log","data","current","temp","timezone","weather","main","daily"],"mappings":"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","sourcesContent":["import \"./App.css\";\nimport React, { useState, useEffect } from \"react\";\nimport Header from \"./componants/Header\";\nimport Weather from \"./componants/Weather\";\nimport Forecast from \"./componants/Forecast\";\nimport axios from \"axios\";\n\nconst URL = \"https://api.openweathermap.org/data/2.5/onecall\";\nconst API_KEY = \"c7c7e26782a97906905097118d594178\";\n\nfunction App() {\n  const [lat, setLat] = useState([]);\n  const [long, setLong] = useState([]);\n  const [city, setCity] = useState(\"\");\n  const [temprature, setTemprature] = useState([]);\n  const [humidity, setHumidity] = useState([]);\n  const [sunrise, setSunrise] = useState([]);\n  const [sunset, setSunset] = useState([]);\n  const [icon, setIcon] = useState([]);\n  const [forcast, setForcast] = useState([]);\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(function (position) {\n      setLat(position.coords.latitude);\n      setLong(position.coords.longitude);\n    });\n\n    axios\n      .get(\n        `${URL}?lat=${lat}&lon=${long}&exclude=hourly,minutely&appid=${API_KEY}`\n      )\n      .then((weatherData) => {\n        console.log(weatherData.data);\n        setTemprature(weatherData.data.current.temp);\n        setSunrise(weatherData.data.current.sunrise);\n        setSunset(weatherData.data.current.sunset);\n        setHumidity(weatherData.data.current.humidity);\n        setCity(weatherData.data.timezone);\n        setIcon(weatherData.data.current.weather[0].main);\n        setForcast(weatherData.data.daily)\n      });\n  }, [lat, long]);\n  return (\n    <div className=\"main\">\n      <head>\n      <Header /></head>\n      <Weather\n        temprature={temprature}\n        humidity={humidity}\n        sunrise={sunrise}\n        sunset={sunset}\n        city={city}\n        icon={icon}\n      />\n      <Forecast forcast={forcast}/>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}